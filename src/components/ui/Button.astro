---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  fullWidth?: boolean;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  fullWidth = false,
  class: className = '',
  ...rest
} = Astro.props;

// Base classes
const baseClasses = 'inline-flex items-center justify-center font-semibold rounded-full transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100';

// Variant classes
const variantClasses = {
  primary: 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-xl hover:shadow-2xl hover:from-purple-700 hover:to-pink-700 focus:ring-purple-500',
  secondary: 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-xl hover:shadow-2xl hover:from-blue-700 hover:to-cyan-700 focus:ring-blue-500',
  outline: 'border-2 border-white/30 text-white backdrop-blur-sm hover:bg-white/10 hover:border-white/50 focus:ring-white/50',
  ghost: 'text-purple-600 hover:text-purple-700 hover:bg-purple-50 focus:ring-purple-500'
};

// Size classes
const sizeClasses = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};

// Width classes
const widthClasses = fullWidth ? 'w-full' : '';

// Combine all classes
const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClasses} ${className}`.trim();

// Determine if we should render as link or button
const Tag = href ? 'a' : 'button';
const tagProps = href ? { href } : { type, disabled };
---

<Tag class={buttonClasses} {...tagProps} {...rest}>
  <slot />
</Tag>